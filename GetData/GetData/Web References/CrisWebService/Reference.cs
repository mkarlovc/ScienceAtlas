//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace GetData.CrisWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CrisDataSoap", Namespace="http://soap.cris.cobiss/")]
    public partial class CrisData : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SearchRetrieveOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CrisData() {
            this.Url = global::GetData.Properties.Settings.Default.GetData_CrisWebService_CrisData;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SearchRetrieveCompletedEventHandler SearchRetrieveCompleted;
        
        /// <remarks/>
        public event RetrieveCompletedEventHandler RetrieveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.cris.cobiss/SearchRetrieve", RequestNamespace="http://soap.cris.cobiss/", ResponseNamespace="http://soap.cris.cobiss/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResults SearchRetrieve(string country, string lang, string entity, string query, int currentPage, int pageSize, string sort, string fields) {
            object[] results = this.Invoke("SearchRetrieve", new object[] {
                        country,
                        lang,
                        entity,
                        query,
                        currentPage,
                        pageSize,
                        sort,
                        fields});
            return ((SearchResults)(results[0]));
        }
        
        /// <remarks/>
        public void SearchRetrieveAsync(string country, string lang, string entity, string query, int currentPage, int pageSize, string sort, string fields) {
            this.SearchRetrieveAsync(country, lang, entity, query, currentPage, pageSize, sort, fields, null);
        }
        
        /// <remarks/>
        public void SearchRetrieveAsync(string country, string lang, string entity, string query, int currentPage, int pageSize, string sort, string fields, object userState) {
            if ((this.SearchRetrieveOperationCompleted == null)) {
                this.SearchRetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchRetrieveOperationCompleted);
            }
            this.InvokeAsync("SearchRetrieve", new object[] {
                        country,
                        lang,
                        entity,
                        query,
                        currentPage,
                        pageSize,
                        sort,
                        fields}, this.SearchRetrieveOperationCompleted, userState);
        }
        
        private void OnSearchRetrieveOperationCompleted(object arg) {
            if ((this.SearchRetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchRetrieveCompleted(this, new SearchRetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://soap.cris.cobiss/Retrieve", RequestNamespace="http://soap.cris.cobiss/", ResponseNamespace="http://soap.cris.cobiss/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SearchResults Retrieve(string country, string entity, string methodCall, string fields) {
            object[] results = this.Invoke("Retrieve", new object[] {
                        country,
                        entity,
                        methodCall,
                        fields});
            return ((SearchResults)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAsync(string country, string entity, string methodCall, string fields) {
            this.RetrieveAsync(country, entity, methodCall, fields, null);
        }
        
        /// <remarks/>
        public void RetrieveAsync(string country, string entity, string methodCall, string fields, object userState) {
            if ((this.RetrieveOperationCompleted == null)) {
                this.RetrieveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveOperationCompleted);
            }
            this.InvokeAsync("Retrieve", new object[] {
                        country,
                        entity,
                        methodCall,
                        fields}, this.RetrieveOperationCompleted, userState);
        }
        
        private void OnRetrieveOperationCompleted(object arg) {
            if ((this.RetrieveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveCompleted(this, new RetrieveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soap.cris.cobiss/")]
    public partial class SearchResults {
        
        private int recordsFoundField;
        
        private string recordsField;
        
        /// <remarks/>
        public int RecordsFound {
            get {
                return this.recordsFoundField;
            }
            set {
                this.recordsFoundField = value;
            }
        }
        
        /// <remarks/>
        public string Records {
            get {
                return this.recordsField;
            }
            set {
                this.recordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchRetrieveCompletedEventHandler(object sender, SearchRetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchRetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchRetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RetrieveCompletedEventHandler(object sender, RetrieveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SearchResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SearchResults)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591